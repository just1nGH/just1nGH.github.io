<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Modern CMake Tutorial</title>
    <link href="/2022/06/20/camke/"/>
    <url>/2022/06/20/camke/</url>
    
    <content type="html"><![CDATA[<blockquote><p>This note is made based on the video in the <a href="https://www.youtube.com/watch?v=mKZ-i-UfGgQ">link</a> </p></blockquote><blockquote><p><a href="https://hsf-training.github.io/hsf-training-cmake-webpage/aio/index.html">Here</a> is more detailed article on modern cmake</p></blockquote><blockquote><p><a href="https://blog.csdn.net/weiwei9363/article/details/109290252?spm=1001.2101.3001.6661.1&utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~default-1-109290252-blog-110624377.pc_relevant_multi_platform_whitelistv1&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~default-1-109290252-blog-110624377.pc_relevant_multi_platform_whitelistv1&utm_relevant_index=1">Here</a> is a chinese article </p></blockquote><h2 id="Principle"><a href="#Principle" class="headerlink" title="Principle"></a>Principle</h2><ul><li><strong>Build System Generators</strong> <code>CMake</code> parses a configuration file (<code>CMakeLists.txt</code>), but instead of directly build a project, it’ll generate another configuration file (<code>makefile</code>)</li><li>A build tool like <code>Make</code> will parse a configuration file (Makefile) that contains all the commands required to build a project based on the source files and other resources inside the project.</li></ul><h2 id="Some-C-files-invoved-in-the-tutorial"><a href="#Some-C-files-invoved-in-the-tutorial" class="headerlink" title="Some C++ files invoved in the tutorial"></a>Some C++ files invoved in the tutorial</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// file: main.cpp </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;foo.h&quot;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    Foo foo;<br>    foo.<span class="hljs-built_in">print</span>();<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// file: foo.h</span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> once</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Foo</span>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print</span><span class="hljs-params">()</span></span>;<br>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// file: foo.cpp</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;foo.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Foo::print</span><span class="hljs-params">()</span></span>&#123;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;hello foo!&quot;</span>&lt;&lt;std::endl;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Pattern-1-For-a-simple-project"><a href="#Pattern-1-For-a-simple-project" class="headerlink" title="Pattern 1 - For a simple project"></a>Pattern 1 - For a simple project</h2><ul><li><p>place all .h and .cpp files directly under the same folder (e.g. <code>cmake_tutorial</code>)</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown">📦cmake<span class="hljs-emphasis">_tutorial</span><br><span class="hljs-emphasis"> ┣ 📜foo.cpp</span><br><span class="hljs-emphasis"> ┣ 📜foo.h</span><br><span class="hljs-emphasis"> ┗ 📜main.cpp</span><br></code></pre></td></tr></table></figure></li><li><p>create a <code>CMakeLists.txt</code> under the same folder with source files and specify the name of cmake exctubale project as <code>myProject</code></p></li></ul><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">cmake_minimum_required</span>(VERSION <span class="hljs-number">3.10</span>)<br><span class="hljs-keyword">set</span>(CMAKE_CXX_STANDARD <span class="hljs-number">17</span>)<br><span class="hljs-keyword">set</span>(CMAKE_CXX_STANDARD_REQUIRED <span class="hljs-keyword">ON</span>)<br><br><span class="hljs-keyword">project</span>(myProject VERSION <span class="hljs-number">1.0</span>)<br><span class="hljs-keyword">add_executable</span>(myProject main.cpp foo.cpp)<br></code></pre></td></tr></table></figure><ul><li><p>In terminal run <code>cmake .</code>command. This  will generate some new files, and the most important one is <code>maekfile</code>. In the following, <code>make</code> command will run this file to build the project.</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs stylus">cmake_tutorial<br> ┣ 📂CMakeFiles<br> ┣ 📜CMakeCache<span class="hljs-selector-class">.txt</span><br> ┣ 📜CMakeLists<span class="hljs-selector-class">.txt</span><br> ┣ 📜Makefile<br> ┣ 📜cmake_install<span class="hljs-selector-class">.cmake</span><br> ┣ 📜foo<span class="hljs-selector-class">.cpp</span><br> ┣ 📜foo<span class="hljs-selector-class">.h</span><br> ┗ 📜<span class="hljs-selector-tag">main</span>.cpp<br></code></pre></td></tr></table></figure></li><li><p>In terminal run <code>make</code> command and new files are generated including a excutable file with the same name as the project (“myProject”) defined in the <code>CMakeLists.txt</code> file. Now you can run <code>./myProject</code> in the terminal. The output like</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ ./myProject<br>hello foo!<br></code></pre></td></tr></table></figure></li></ul><h2 id="Pattern-2-move-generated-files-to-a-debug-folder"><a href="#Pattern-2-move-generated-files-to-a-debug-folder" class="headerlink" title="Pattern 2 - move generated files to a debug folder"></a>Pattern 2 - move generated files to a debug folder</h2><blockquote><p>A better practice is to put all generated file into a folder like <code>build</code> or <code>debug</code></p></blockquote><ul><li>run the follwing command in terminal</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">mkdir</span> debug</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cd</span> debug</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">cmake ../</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">make</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">./myProject</span><br></code></pre></td></tr></table></figure><ul><li>now all files generated are put into the debug folder<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus">make_tutorial<br> ┣ 📂debug<br> ┣ 📜CMakeLists<span class="hljs-selector-class">.txt</span><br> ┣ 📜foo<span class="hljs-selector-class">.cpp</span><br> ┣ 📜foo<span class="hljs-selector-class">.h</span><br> ┗ 📜<span class="hljs-selector-tag">main</span>.cpp<br></code></pre></td></tr></table></figure></li></ul><h2 id="Pattern-3-Place-header-files-in-a-seperate-folder"><a href="#Pattern-3-Place-header-files-in-a-seperate-folder" class="headerlink" title="Pattern 3 - Place header files in a seperate folder"></a>Pattern 3 - Place header files in a seperate folder</h2><ul><li>The files are arranged like follow, <code>debug</code> folder is empty now.<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stylus">📦cmake_tutorial<br> ┣ 📂debug<br> ┣ 📂include<br> ┃ ┗ 📜foo<span class="hljs-selector-class">.h</span><br> ┣ 📜CMakeLists<span class="hljs-selector-class">.txt</span><br> ┣ 📜foo<span class="hljs-selector-class">.cpp</span><br> ┗ 📜<span class="hljs-selector-tag">main</span>.cpp<br></code></pre></td></tr></table></figure></li><li>In order to let <code>foo.h</code> known for <code>main.cpp</code> and <code>foo.cpp</code>, we need to  add a header file directory in <code>CMakeLists.txt</code>:</li></ul><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CMake"><span class="hljs-keyword">target_include_directories</span>(myProject PUBLIC <span class="hljs-variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/<span class="hljs-keyword">include</span>)<br></code></pre></td></tr></table></figure><ul><li><p>now we have <code>CMakeLists.txt</code> as below</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">cmake_minimum_required</span>(VERSION <span class="hljs-number">3.10</span>)<br><span class="hljs-keyword">set</span>(CMAKE_CXX_STANDARD <span class="hljs-number">17</span>)<br><span class="hljs-keyword">set</span>(CMAKE_CXX_STANDARD_REQUIRED <span class="hljs-keyword">ON</span>)<br><br><span class="hljs-keyword">project</span>(myProject VERSION <span class="hljs-number">1.0</span>)<br><span class="hljs-keyword">add_executable</span>(myProject main.cpp foo.cpp)<br><span class="hljs-keyword">target_include_directories</span>(myProject PUBLIC <span class="hljs-variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/<span class="hljs-keyword">include</span>)<br><br></code></pre></td></tr></table></figure></li><li><p>run the follwing command in terminal</p></li></ul><p>classical usage</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cd</span> debug</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">cmake ../ &amp;&amp; make &amp;&amp; ./myproject</span><br><br></code></pre></td></tr></table></figure><p>New </p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">$ cmake -S . -<span class="hljs-keyword">B </span><span class="hljs-built_in">debug</span><br>$ camke --<span class="hljs-keyword">build </span><span class="hljs-built_in">debug</span><br></code></pre></td></tr></table></figure><h2 id="Pattern-4-place-cpp-files-also-in-a-seperate-folder-source"><a href="#Pattern-4-place-cpp-files-also-in-a-seperate-folder-source" class="headerlink" title="Pattern 4 - place .cpp files also in a seperate folder source"></a>Pattern 4 - place .cpp files also in a seperate folder <code>source</code></h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stylus">📦cmake_tutorial<br> ┣ 📂debug<br> ┣ 📂include<br> ┃ ┗ 📜foo<span class="hljs-selector-class">.h</span><br> ┣ 📂source<br> ┃ ┣ 📜foo<span class="hljs-selector-class">.cpp</span><br> ┃ ┗ 📜<span class="hljs-selector-tag">main</span><span class="hljs-selector-class">.cpp</span><br> ┗ 📜CMakeLists.txt<br></code></pre></td></tr></table></figure><ul><li>The <code>CMakeLists.txt</code> modified accordingly as<figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">cmake_minimum_required</span>(VERSION <span class="hljs-number">3.10</span>)<br><span class="hljs-keyword">set</span>(CMAKE_CXX_STANDARD <span class="hljs-number">17</span>)<br><span class="hljs-keyword">set</span>(CMAKE_CXX_STANDARD_REQUIRED <span class="hljs-keyword">ON</span>)<br><br><span class="hljs-keyword">project</span>(myProject VERSION <span class="hljs-number">1.0</span>)<br><br><span class="hljs-keyword">file</span>(GLOB_RECURSE SRC_FILES source/*.cpp)<br><span class="hljs-keyword">add_executable</span>(myProject <span class="hljs-variable">$&#123;SRC_FILES&#125;</span>)<br><br><span class="hljs-keyword">target_include_directories</span>(myProject PUBLIC <span class="hljs-variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/<span class="hljs-keyword">include</span>)<br><br></code></pre></td></tr></table></figure></li></ul><h2 id="Pattern-5-With-Library"><a href="#Pattern-5-With-Library" class="headerlink" title="Pattern 5 - With Library"></a>Pattern 5 - With Library</h2><ul><li>Assume <code>foo2.h</code> and <code>foo2.cpp</code> in a lib folder</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs stylus">📦cmake_tutorial<br> ┣ 📂debug<br> ┣ 📂include<br> ┃ ┗ 📜foo<span class="hljs-selector-class">.h</span><br> ┣ 📂lib<br> ┃ ┣ 📂<span class="hljs-selector-tag">header</span><br> ┃ ┃ ┗ 📜foo2<span class="hljs-selector-class">.h</span><br> ┃ ┗ 📂source<br> ┃ ┃ ┗ 📜foo2<span class="hljs-selector-class">.cpp</span><br> ┣ 📂source<br> ┃ ┣ 📜foo<span class="hljs-selector-class">.cpp</span><br> ┃ ┗ 📜<span class="hljs-selector-tag">main</span><span class="hljs-selector-class">.cpp</span><br> ┗ 📜CMakeLists.txt<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// file: foo2.h</span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> once</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Foo2</span>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print</span><span class="hljs-params">()</span></span>;<br>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// file: foo2.cpp</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;foo2.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Foo2::print</span><span class="hljs-params">()</span></span>&#123;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;hello foo2 from lib!\n&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>the corresponding <code>CmakeLists.txt</code> is as follow<figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">cmake_minimum_required</span>(VERSION <span class="hljs-number">3.10</span>)<br><span class="hljs-keyword">set</span>(CMAKE_CXX_STANDARD <span class="hljs-number">17</span>)<br><span class="hljs-keyword">set</span>(CMAKE_CXX_STANDARD_REQUIRED <span class="hljs-keyword">ON</span>)<br><br><span class="hljs-keyword">project</span>(myProject VERSION <span class="hljs-number">1.0</span>)<br><br><br><span class="hljs-keyword">file</span>(GLOB_RECURSE LIB_SRC_FILES lib/source/*.cpp )<br><span class="hljs-keyword">add_library</span>(myLib STATIC <span class="hljs-variable">$&#123;LIB_SRC_FILES&#125;</span>)<br><span class="hljs-keyword">target_include_directories</span>(myLib PUBLIC <span class="hljs-variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/lib/header)<br><br><span class="hljs-keyword">file</span>(GLOB_RECURSE SRC_FILES source/*.cpp )<br><span class="hljs-keyword">add_executable</span>(myProject <span class="hljs-variable">$&#123;SRC_FILES&#125;</span>)<br><span class="hljs-keyword">target_include_directories</span>(myProject PUBLIC <span class="hljs-variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/<span class="hljs-keyword">include</span>)<br><br><span class="hljs-keyword">target_link_libraries</span>(myProject PUBLIC myLib)<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>c++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>original</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>NS3 -Configuring VS Code for IntelliSence, Building and Debugging</title>
    <link href="/2022/06/19/ns3/"/>
    <url>/2022/06/19/ns3/</url>
    
    <content type="html"><![CDATA[<h2 id="Environments"><a href="#Environments" class="headerlink" title="Environments"></a>Environments</h2><ul><li>Umbundu Linux 22.04</li><li>gcc 11.2.0</li><li>gdb 12.0.90</li><li>vs code , with extension c&#x2F;c++</li><li>NS3.5 installed under ~&#x2F;NS3, build completed following <a href="https://www.nsnam.org/docs/release/3.35/tutorial/html/getting-started.html#building-ns-3">https://www.nsnam.org/docs/release/3.35/tutorial/html/getting-started.html#building-ns-3</a></li></ul><h2 id="Configuring-Visual-Studio-Code-for-Auto-Completion-amp-Syntax-Highlighting"><a href="#Configuring-Visual-Studio-Code-for-Auto-Completion-amp-Syntax-Highlighting" class="headerlink" title="Configuring Visual Studio Code for Auto-Completion &amp; Syntax Highlighting"></a>Configuring Visual Studio Code for Auto-Completion &amp; Syntax Highlighting</h2><p>Lunch VS Code at the NS3 directory:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">justin@justin-vm:~<span class="hljs-comment"># cd NS3/ns-allinone-3.35/ns-3.35/</span><br>justin@justin-vm:~<span class="hljs-comment"># code .</span><br><span class="hljs-comment">#  or root user</span><br>root@justin-vm:~<span class="hljs-comment"># code . --user-data-dir=/root/.vscode-root</span><br></code></pre></td></tr></table></figure><p>Press F1 or (<strong>Ctrl + Shift + P</strong>) to access VS Code Command Palette, run “C&#x2F;C++: Edit Configurations(JSON) ” to create&#x2F;open a <strong><a href="https://stackoverflow.com/questions/47599682/visual-studio-code-c-cpp-edit-configurations-does-not-open-c-cpp-properties-jso">c_cpp_properties.json</a> file and modify it</strong> </p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;includePath&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                <span class="hljs-string">&quot;$&#123;workspaceFolder&#125;/build/**&quot;</span><br>            <span class="hljs-punctuation">]</span><br></code></pre></td></tr></table></figure><p>The full file like</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;configurations&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Linux&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;includePath&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                <span class="hljs-string">&quot;$&#123;workspaceFolder&#125;/build/**&quot;</span><br>            <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;defines&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;compilerPath&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/usr/bin/gcc&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;cStandard&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;gnu17&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;cppStandard&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;gnu++14&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;intelliSenseMode&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;linux-gcc-x64&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">4</span><br><span class="hljs-punctuation">&#125;</span> <br></code></pre></td></tr></table></figure><p>Save and close <strong><a href="https://stackoverflow.com/questions/47599682/visual-studio-code-c-cpp-edit-configurations-does-not-open-c-cpp-properties-jso">c_cpp_properties.json</a> file.  Auto-Completion &amp; Syntax Highlighting function should work now.</strong></p><h2 id="Configuring-Build"><a href="#Configuring-Build" class="headerlink" title="Configuring Build"></a>Configuring Build</h2><p>Click Menu→Terminal→Configure Default Build Task to edit tasks.jason file under .vscode folder</p><p><img src="/2022/06/19/ns3/Untitled.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs jsonß">&#123;<br>&quot;version&quot;: &quot;2.0.0&quot;,<br>&quot;tasks&quot;: [<br>&#123;<br>&quot;type&quot;: &quot;cppbuild&quot;,<br>&quot;label&quot;: &quot;C/C++: cpp build active file&quot;,<br>//&quot;command&quot;: &quot;/usr/bin/cpp&quot;,<br>&quot;command&quot;: &quot;./waf&quot;,<br>&quot;args&quot;: [<br>//&quot;-fdiagnostics-color=always&quot;,<br>//&quot;-g&quot;,<br>//&quot;$&#123;file&#125;&quot;,<br>//&quot;-o&quot;,<br>//&quot;$&#123;fileDirname&#125;/$&#123;fileBasenameNoExtension&#125;&quot;<br>],<br>&quot;options&quot;: &#123;<br>&quot;cwd&quot;: &quot;$&#123;workspaceFolder&#125;&quot;<br>&#125;,<br>&quot;problemMatcher&quot;: [<br>&quot;$gcc&quot;<br>],<br>&quot;group&quot;: &#123;<br>&quot;kind&quot;: &quot;build&quot;,<br>&quot;isDefault&quot;: true<br>&#125;,<br>&quot;detail&quot;: &quot;compiler: /usr/bin/cpp&quot;<br>&#125;<br>]<br>&#125;<br></code></pre></td></tr></table></figure><p>Save and exit tasks.jason. The click Menu→Terminal→ Run Build Task or shortcut key (Ctrl + Shift + B), you should see build works.</p><p><img src="/2022/06/19/ns3/Untitled1.png"></p><h2 id="Config-gdb-Debugging"><a href="#Config-gdb-Debugging" class="headerlink" title="Config gdb Debugging"></a>Config gdb Debugging</h2><p>Open .&#x2F;scratch&#x2F;scratch-simulator.cc in the VS Code. Press F5, choose “C++(GDB&#x2F;LLB)”, then select “Waf - build and debug active file …” a window pop out and hit Open ‘launch.json’</p><p><img src="/2022/06/19/ns3/Untitled2.png"></p><p>Replace the content of  ‘launch.json’ with the following</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2.0.0&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;tasks&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cppbuild&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;label&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;C/C++: cpp build active file&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-comment">//&quot;command&quot;: &quot;/usr/bin/cpp&quot;,</span><br><span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;./waf&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;args&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br><span class="hljs-comment">//&quot;-fdiagnostics-color=always&quot;,</span><br><span class="hljs-comment">//&quot;-g&quot;,</span><br><span class="hljs-comment">//&quot;$&#123;file&#125;&quot;,</span><br><span class="hljs-comment">//&quot;-o&quot;,</span><br><span class="hljs-comment">//&quot;$&#123;fileDirname&#125;/$&#123;fileBasenameNoExtension&#125;&quot;</span><br><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;options&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;cwd&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$&#123;workspaceFolder&#125;&quot;</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;problemMatcher&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br><span class="hljs-string">&quot;$gcc&quot;</span><br><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;group&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;kind&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;build&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;isDefault&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;detail&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;compiler: /usr/bin/cpp&quot;</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>Save and exit. Now set a breakpoint in <a href="http://scratch-simulator.cc/">scratch-simulator.cc</a> source file and hit F5, you should see that the debugging works.  Be patient, the pdb is generally slow.</p>]]></content>
    
    
    <categories>
      
      <category>NS3</category>
      
    </categories>
    
    
    <tags>
      
      <tag>original</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/06/19/hello-world/"/>
    <url>/2022/06/19/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
